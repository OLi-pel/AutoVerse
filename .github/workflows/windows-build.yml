# .github/workflows/build-windows.yml
# This is the GitHub Actions workflow to build the Windows executable.

name: Build Windows Executable

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Check out your repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Step 3: Download and place FFmpeg where the .spec file can find it
      # Note: This uses PowerShell commands, which are native to Windows runners.
      - name: Download and prepare FFmpeg
        run: |
          New-Item -ItemType Directory -Force -Path "bin"
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z" -OutFile "ffmpeg.7z"
          # '7z' is pre-installed on GitHub Actions Windows VMs
          7z x ffmpeg.7z -offmpeg*
          Copy-Item "ffmpeg-*-full_build/bin/ffmpeg.exe" "bin/ffmpeg.exe"
        shell: powershell

      # Step 4: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Build the application using your universal .spec file
      - name: Build with PyInstaller
        run: pyinstaller TranscriptionOli.spec

      # Step 6: Zip the output folder for easy distribution
      - name: Zip the output folder
        run: Compress-Archive -Path dist/TranscriptionOli_App -DestinationPath dist/TranscriptionOli_Windows.zip
        shell: powershell
        
      # Step 7: Upload the zipped folder as a downloadable artifact
      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TranscriptionOli-Windows-App
          path: dist/TranscriptionOli_Windows.zip